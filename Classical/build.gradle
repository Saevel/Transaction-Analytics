group 'org.dmcs'

version '1.0'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}

apply plugin: 'scala'

apply plugin: 'gradle-one-jar'

apply plugin: 'groovy'

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import org.dmcs.transaction.analytics.mesosphere.MesosphereDeployment

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime

    acceptanceTestCompile{} extendsFrom compile
    acceptanceTestRuntime{} extendsFrom runtime
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/scala')
        }
        resources.srcDir file('src/it/resources')
    }

    acceptanceTests {
        java {
            compileClasspath += main.output + configurations.acceptanceTestCompile
            runtimeClasspath += main.output + configurations.acceptanceTestRuntime
            srcDir file('src/acceptance/scala')
        }
        resources.srcDir file('src/acceptance/resources')
    }
}

task deploy {
    // String marathonUrl = System.getenv("DCOS_URL") + "/service/marathon-user";
    // TODO: Marathon Application!
    // MesosphereDeployment.deployToMarathon(marathonUrl, null)
}

dependencies {

    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'
    compile group: 'com.outworkers', name: 'phantom-streams_2.11', version: '2.0.0'
    compile group: 'com.typesafe.akka', name: 'akka-http_2.11', version: '10.0.1'
    compile group: 'org.typelevel', name: 'cats-core_2.11', version: '0.9.0'

    compile project(':Model')
    compile project(':Events')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: '3.0.0'
    testCompile group: 'org.scalacheck', name: 'scalacheck_2.11', version: '1.12.6'

    acceptanceTestCompile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'
    acceptanceTestCompile project(':TestFramework')
}

docker {
    url=System.getenv('DOCKER_MACHINE_URL')
    certPath=file(System.getenv('DOCKER_CERT_PATH'))
}

task fatJar(type: OneJar){
    mainClass = 'org.dmcs.transaction.analytics.classical.ClassicalAnalyticsApplication'
}

task it(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

task acceptanceTestCompile(type: ScalaCompile) {
    source = fileTree(dir: 'src/acceptance/scala', include: '**/*.scala')
    destinationDir = file('build/classes/acceptance')
    classpath = sourceSets.acceptanceTests.runtimeClasspath
    scalaCompileOptions.incrementalOptions.analysisFile = new File("${buildDir}/tmp/scala/compilerAnalysis/compileCustomScala.analysis")
}

task acceptanceTestBaseJar(type: Jar){
    archiveName = 'Classical-Acceptance-Tests-partial.jar'
    manifest {
        attributes(
            'Main-Class':'org.dmcs.transaction.analytics.classical.ClassicalAcceptanceTestsApplication',
            'Class-Path': configurations.acceptanceTestCompile.files.collect {"$it.name"}.join(' ')
        )
    }
    from 'build/classes/acceptance'
}

task acceptanceTestJar(type: OneJar) {
    mainClass = 'org.dmcs.transaction.analytics.classical.ClassicalAcceptanceTestsApplication'
    baseJar = acceptanceTestBaseJar
    archiveName = 'Classical-Acceptance-Tests.jar'
}

acceptanceTestJar.dependsOn(acceptanceTestBaseJar)

task prepareAcceptanceTestDockerBuild(type: Copy) {
    from(project.buildDir.getAbsolutePath() + "/libs/Classical-Acceptance-Tests.jar")
    into(project.buildDir.getAbsolutePath() + "/acceptance/docker")

    from(project.projectDir.getAbsolutePath() + "/src/acceptance/docker")
    into(project.buildDir.getAbsolutePath() + "/acceptance/docker")
}

task acceptanceTestDockerize(type: DockerBuildImage) {
    inputDir = project.file(project.buildDir.path + "/acceptance/docker")
    tags = ["transaction-analytics/classical-acceptance-tests"] as Set<String>
}

// TODO: Implement
/*
task acceptanceTest {
    // TODO: Deploy acceptance tests to Maraton.
}
*/

acceptanceTestBaseJar.dependsOn(acceptanceTestCompile)
prepareAcceptanceTestDockerBuild.dependsOn(acceptanceTestJar)
acceptanceTestDockerize.dependsOn(prepareAcceptanceTestDockerBuild)

task prepareDockerBuild(type: Copy) {
    from(project.buildDir.getAbsolutePath() + "/libs/" + project.name + "-" + project.version + "-standalone.jar")
    into(project.buildDir.getAbsolutePath() + "/docker")

    from(project.projectDir.getAbsolutePath() + "/src/main/docker")
    into(project.buildDir.getAbsolutePath() + "/docker")
}

task dockerize(type: DockerBuildImage){
    inputDir = project.file(project.buildDir.path + "/docker")
    tags = ["transaction-analytics/classical"] as Set<String>
}

/*
task dockerPush(type: DockerPushImage){
    imageName = 'transaction-analytics/classical'
}

dockerPush.dependsOn dockerize
*/

deploy.dependsOn dockerize
dockerize.dependsOn fatJar
dockerize.dependsOn prepareDockerBuild
fatJar.dependsOn build
prepareDockerBuild.dependsOn fatJar
check.dependsOn it
it.mustRunAfter test