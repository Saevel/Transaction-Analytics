group 'org.dmcs'

version '1.0'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}

project.ext.set("configs", "batch,spark")

apply plugin: 'scala'

apply plugin: 'gradle-one-jar'

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/scala')
        }
        resources.srcDir file('src/it/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

// TODO: Fix Spark provided dependencies.
// TODO: Port to Akka HTTP?
dependencies {

    compile project(':Events')
    compile project(':Model')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'
    compile group: 'org.apache.spark', name: 'spark-sql_2.11', version: '1.6.0'

    compile group: 'io.spray', name: 'spray-can_2.11', version: '1.3.3'
    compile group: 'io.spray', name: 'spray-routing_2.11', version: '1.3.3'
    compile group: 'io.spray', name: 'spray-http_2.11', version: '1.3.3'

    testCompile group: 'org.scalacheck', name: 'scalacheck_2.11', version: '1.13.2'
    testCompile group: 'org.scalatest', name: 'scalatest_2.11', version: '2.2.6'

    integrationTestCompile group: 'io.spray', name: 'spray-client', version: '1.3.1'
}

// TODO: Get these from envs
docker {
    url=System.getenv('DOCKER_MACHINE_URL')
    certPath=file(System.getenv('DOCKER_CERT_PATH'))
}

task fatJar(type: OneJar){
    mainClass = 'org.dmcs.transaction.analytics.lambda.speed.layer.SpeedLayerApplication'
}

/**
 * Integration tests.
 */
task it(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

/**
 * Copies config from the top-level project into this module.
 */
task getConfigs(type: Copy){
    if(project.hasProperty('configs')){
        configs.split(",").each{ config ->
            from(rootProject.projectDir.getAbsolutePath() + "/src/main/resources/" + config + ".properties")
            into(project.buildDir.getAbsolutePath() + "/resources/main")
        }
    }
}

task prepareDockerBuild(type: Copy) {
    from(project.buildDir.getAbsolutePath() + "/libs/" + project.name + "-" + project.version + "-standalone.jar")
    into(project.buildDir.getAbsolutePath() + "/docker")

    from(project.projectDir.getAbsolutePath() + "/src/main/docker")
    into(project.buildDir.getAbsolutePath() + "/docker")
}

task dockerize(type: DockerBuildImage){
    inputDir = project.file(project.buildDir.path + "/docker")
    tags = ["transaction-analytics/speed-layer"] as Set<String>
}

// Task dependencies configuration
dockerize.dependsOn fatJar
dockerize.dependsOn prepareDockerBuild
compileScala.dependsOn getConfigs
fatJar.dependsOn build
prepareDockerBuild.dependsOn fatJar
check.dependsOn it
it.mustRunAfter test