group 'org.dmcs'

version '1.0'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}

apply plugin: 'scala'

apply plugin: 'gradle-one-jar'

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

configurations {
    acceptanceTestCompile{} extendsFrom compile
    acceptanceTestRuntime{} extendsFrom runtime
}

sourceSets {
    acceptanceTests {
        java {
            compileClasspath += main.output + configurations.acceptanceTestCompile
            runtimeClasspath += main.output + configurations.acceptanceTestRuntime
            srcDir file('src/acceptance/scala')
        }
        resources.srcDir file('src/acceptance/resources')
    }
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'
    acceptanceTestCompile project(':Tests')
}

docker {
    url=System.getenv('DOCKER_MACHINE_URL')
    certPath=file(System.getenv('DOCKER_CERT_PATH'))

    registryCredentials {
        url = System.getenv("DOCKER_REGISTRY_URL")
        username = System.getenv("DOCKER_USERNAME")
        password = System.getenv("DOCKER_PASSWORD")
        email = System.getenv("DOCKER_USER_EMAIL")
    }
}

task dockerize(dependsOn: [':Lambda:BatchLayer:dockerize', ':Lambda:SpeedLayer:dockerize']){}

task it(dependsOn: [':Lambda:BatchLayer:it', ':Lambda:SpeedLayer:it']){}

task acceptanceTestCompile(type: ScalaCompile) {
    source = fileTree(dir: 'src/acceptance/scala', include: '**/*.scala')
    destinationDir = file('build/classes/acceptance')
    classpath = sourceSets.acceptanceTests.runtimeClasspath
    scalaCompileOptions.incrementalOptions.analysisFile = new File("${buildDir}/tmp/scala/compilerAnalysis/compileCustomScala.analysis")
}

task acceptanceTestBaseJar(type: Jar, dependsOn: acceptanceTestCompile) {
    archiveName = 'Lambda-Acceptance-Tests-partial.jar'
    manifest {
        attributes(
                'Main-Class':'org.dmcs.transaction.analytics.lambda.LambdaAcceptanceTestsApplication',
                'Class-Path': configurations.acceptanceTestCompile.files.collect {"$it.name"}.join(' ')
        )
    }
    from 'build/classes/acceptance'
}

task acceptanceTestJar(type: OneJar, dependsOn: acceptanceTestBaseJar) {
    mainClass = 'org.dmcs.transaction.analytics.lambda.LambdaAcceptanceTestsApplication'
    baseJar = acceptanceTestBaseJar
    archiveName = 'Lambda-Acceptance-Tests.jar'
}

task prepareAcceptanceTestDockerBuild(type: Copy, dependsOn: acceptanceTestJar) {
    from(project.buildDir.getAbsolutePath() + "/libs/Lambda-Acceptance-Tests.jar")
    into(project.buildDir.getAbsolutePath() + "/acceptance/docker")

    from(project.projectDir.getAbsolutePath() + "/src/acceptance/docker")
    into(project.buildDir.getAbsolutePath() + "/acceptance/docker")
}

task buildAcceptanceTestDocker(type: DockerBuildImage, dependsOn: prepareAcceptanceTestDockerBuild) {
    inputDir = project.file(project.buildDir.path + "/acceptance/docker")
    tag = System.getenv("DOCKER_USERNAME") + "/transaction-analytics-lambda-acceptance-tests"
}

task acceptanceTestDockerize(type: DockerPushImage, dependsOn: buildAcceptanceTestDocker) {
    imageName = System.getenv("DOCKER_USERNAME") + '/transaction-analytics-lambda-acceptance-tests'
}

task deployEnvironment(type: Exec) {
    logger.println "Deploy Lambda environment to Docker Swarm"
    commandLine "docker stack deploy -c environment.yml lambda_env".tokenize()
}

task undeployEnvironment(type: Exec) {
    commandLine 'docker stack rm lambda_env'.tokenize()
}

task deploy(type: Exec, dependsOn: [deployEnvironment, dockerize]) {
    logger.println "Deploy Lambda application to Docker Swarm"
    commandLine "docker stack deploy -c application.yml lambda".tokenize()
}

task undeploy(type: Exec) {
    commandLine "docker stack rm lambda".tokenize()
}

task acceptanceTest(type: Exec, dependsOn: [deploy, acceptanceTestDockerize]) {
    logger.info("Acceptance Tests for the Lambda project")
    commandLine "docker stack deploy -c acceptance-tests.yml lambda_acceptance_tests"
}

task scale << {
    int instances = Integer.parseInt(project.property("instances"))
    scaleLambda(instances)
}

task testAll(dependsOn: []) << {

    int maxInstances = Integer.parseInt(project.property("maxInstances"))
    for(int i = 2; i <= maxInstances; i++){

    }
}