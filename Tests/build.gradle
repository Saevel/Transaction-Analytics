import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

group 'org.dmcs'

version '1.0'

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.8'
    }
}

project.ext.set("configs", "batch,spark,mds")

apply plugin: 'scala'

apply plugin: 'gradle-one-jar'

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile group: 'org.scala-lang', name: 'scala-library', version: '2.11.8'

    compile project(':Model')
    compile project(':Events')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile group: 'org.scalacheck', name: 'scalacheck_2.11', version: '1.13.2'
    compile group: 'org.scalatest', name: 'scalatest_2.11', version: '2.2.6'
    compile group: 'com.typesafe.play', name: 'play-json_2.11', version: '2.5.9'
    compile group: 'com.nrinaudo', name: 'kantan.csv_2.11', version: '0.1.15'
    compile group: 'com.sksamuel.avro4s', name: 'avro4s-core_2.11', version: '1.8.0'
    compile group: 'org.apache.hadoop', name: 'hadoop-client', version: '2.7.4'
    compile group: 'com.typesafe.scala-logging', name: 'scala-logging_2.11', version: '3.7.2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}

docker {
    url=System.getenv('DOCKER_MACHINE_URL')
    certPath=file(System.getenv('DOCKER_CERT_PATH'))

    registryCredentials {
        url = System.getenv("DOCKER_REGISTRY_URL")
        username = System.getenv("DOCKER_USERNAME")
        password = System.getenv("DOCKER_PASSWORD")
        email = System.getenv("DOCKER_USER_EMAIL")
    }
}

/**
 * Copies config from the top-level project into this module.
 */
task getConfigs(type: Copy){
    if(project.hasProperty('configs')){
        configs.split(",").each{ config ->
            from(rootProject.projectDir.getAbsolutePath() + "/src/main/resources/" + config + ".properties")
            into(project.buildDir.getAbsolutePath() + "/resources/main")
        }
    }
}

task fatJar(type: OneJar, dependsOn: [build, getConfigs]){
    mainClass = 'org.dmcs.transaction.analyst.tests.app.TestsApplication'
}

task prepareDockerBuild(type: Copy, dependsOn: fatJar) {
    from(project.buildDir.getAbsolutePath() + "/libs/" + project.name + "-" + project.version + "-standalone.jar")
    into(project.buildDir.getAbsolutePath() + "/docker")

    from(project.projectDir.getAbsolutePath() + "/src/main/docker")
    into(project.buildDir.getAbsolutePath() + "/docker")
}

task dockerBuild(type: DockerBuildImage, dependsOn: prepareDockerBuild){
    inputDir = project.file(project.buildDir.path + "/docker")
    tag = System.getenv("DOCKER_USERNAME") + "/transaction-analytics-tests"
}

task dockerize(type: DockerPushImage, dependsOn: dockerBuild){
    imageName = System.getenv("DOCKER_USERNAME") + "/transaction-analytics-tests"
}

task deploy(type: Exec, dependsOn: dockerize){
    // TODO: Moar docker parms
    commandLine "docker run saevel/transaction-analytics-tests"
}